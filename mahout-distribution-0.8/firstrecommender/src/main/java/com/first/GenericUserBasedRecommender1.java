package com.first;

import java.io.*;
import java.util.*;

import org.apache.mahout.cf.taste.common.TasteException;
import org.apache.mahout.cf.taste.eval.RecommenderBuilder;
import org.apache.mahout.cf.taste.eval.RecommenderEvaluator;
import org.apache.mahout.cf.taste.impl.eval.AverageAbsoluteDifferenceRecommenderEvaluator;
import org.apache.mahout.cf.taste.impl.model.file.*;
import org.apache.mahout.cf.taste.impl.neighborhood.*;
import org.apache.mahout.cf.taste.impl.recommender.*;
import org.apache.mahout.cf.taste.impl.similarity.*;
import org.apache.mahout.cf.taste.model.*;
import org.apache.mahout.cf.taste.neighborhood.*;
import org.apache.mahout.cf.taste.recommender.*;
import org.apache.mahout.cf.taste.similarity.*;
import org.apache.mahout.common.RandomUtils;

public class GenericUserBasedRecommender1 {
	
	  public static void main(String[] args) throws Exception {
		  //RandomUtils.useTestSeed();
	      // Create a data source from the CSV file
	      
		  String fileName;
		  
		  double[] scores1 = new double[48];
		  for(int h = 0; h < 10; h++)
		  {
			  for(int i = 2; i < 50; i++)
			  {
				  fileName = "data/gmm100Normalized/" + i + "clusters.csv";
				  scores1[i-2] += evaluateFile(fileName);
			  }
	      }
	      
	      System.out.println("==GMM100NORMALIZED==");
	      
	      for(int j = 0; j < scores1.length; j++)
	      {
	          scores1[j] = (scores1[j] / 10);
	    	  //System.out.println("Error for " + (j+2) + " Clusters : " + scores[j]);
	    	  System.out.println(scores1[j]);
	      }
	      
	      System.out.println();
	      
	      double[] scores2 = new double[48];
	      for(int h = 0; h < 10; h++)
	      {
			  for(int i = 2; i < 50; i++)
			  {
				  fileName = "data/KMeans100Normalized/" + i + "clusters.csv";
				  scores2[i-2] += evaluateFile(fileName);
			  }
	      }
	      
	      System.out.println("==KMEANS100NORMALIZED==");
	      
	      for(int j = 0; j < scores2.length; j++)
	      {
	          scores2[j] = (scores2[j] / 10);
	    	  //System.out.println("Error for " + (j+2) + " Clusters : " + scores[j]);
	    	  System.out.println(scores2[j]);
	      }
	      
	      System.out.println();
	      
	      double[] scores3 = new double[48];
	      for(int h = 0; h < 10; h++)
	      {
			  for(int i = 2; i < 50; i++)
			  {
				  fileName = "data/spectral100Normalized/" + i + "clusters.csv";
				  scores3[i-2] += evaluateFile(fileName);
			  }
	      }
	      
	      System.out.println("==SPECTRAL100NORMALIZED==");
	      
	      for(int j = 0; j < scores3.length; j++)
	      {
	          scores3[j] = (scores3[j] / 10);
	    	  //System.out.println("Error for " + (j+2) + " Clusters : " + scores[j]);
	    	  System.out.println(scores3[j]);
	      }
	      
		  //System.out.println(evaluateFile("data/2clusters.csv"));
		  
	      
	      
	      /*
	      UserSimilarity userSimilarity = new PearsonCorrelationSimilarity(dataModel);
	      UserNeighborhood userNeighborhood = new NearestNUserNeighborhood(2, userSimilarity, dataModel);
	 
	      // Create a generic user based recommender with the dataModel, the userNeighborhood and the userSimilarity
	      Recommender genericRecommender =  new GenericUserBasedRecommender(dataModel, userNeighborhood, userSimilarity);
	 
	      // Generate a list of 3 recommended items for user 1001
	      List<RecommendedItem> itemRecommendations = genericRecommender.recommend(1001, 3);
	 
	      // Display the item recommendations generated by the recommendation engine
	      for (RecommendedItem recommendedItem : itemRecommendations) {
	          System.out.println(recommendedItem);
	      }
	      */
	  }
	  
	  public static double evaluateFile(String f) throws TasteException, IOException
	  {
		  File userPreferencesFile = new File(f);
		  //System.out.println(f);
		  DataModel dataModel = new FileDataModel(userPreferencesFile);
	      
	      RecommenderEvaluator evaluator = new AverageAbsoluteDifferenceRecommenderEvaluator();
	      
	      RecommenderBuilder recommenderBuilder = new RecommenderBuilder()
	      {
	    	  public Recommender buildRecommender(DataModel model) throws TasteException
	    	  {
	    		  UserSimilarity similarity = new PearsonCorrelationSimilarity(model);
	    		  UserNeighborhood neighborhood = new NearestNUserNeighborhood(2, similarity, model);
	    		  return new GenericUserBasedRecommender(model, neighborhood, similarity);
	    	  }
	      };
	      
	      double score = evaluator.evaluate(recommenderBuilder, null, dataModel, 0.7, 0.1);
	      return score;
	  }
}
